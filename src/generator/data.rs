use crate::generator::ECCLevel;

const MAX_SIZE_DATA: [[usize; 40]; 4] = [
    [
        152, 272, 440, 640, 864, 1088, 1248, 1552, 1856, 2192,
        2592, 2960, 3424, 3688, 4184, 4712, 5176, 5768, 6360, 6888,
        7456, 8048, 8752, 9392, 10208, 10960, 11744, 12248, 13048, 13880,
        14744, 15640, 16568, 17528, 18448, 19472, 20528, 21616, 22496, 23648
    ],
    [
        128, 224, 352, 512, 688, 864, 992, 1232, 1456, 1728,
        2032, 2320, 2672, 2920, 3320, 3624, 4056, 4504, 5016, 5352,
        5712, 6256, 6880, 7312, 8000, 8496, 9024, 9544, 10136, 10984,
        11640, 12328, 13048, 13800, 14496, 15312, 15936, 16816, 17728, 18672
    ],
    [
        104, 176, 272, 384, 496, 608, 704, 880, 1056, 1232,
        1440, 1648, 1952, 2088, 2360, 2600, 2936, 3176, 3560, 3880,
        4096, 4544, 4912, 5312, 5744, 6032, 6464, 6968, 7288, 7880,
        8264, 8920, 9368, 9848, 10288, 10832, 11408, 12016, 12656, 13328
    ],
    [
        72, 128, 208, 288, 368, 480, 528, 688, 800, 976,
        1120, 1264, 1440, 1576, 1784, 2024, 2264, 2504, 2728, 3080,
        3248, 3536, 3712, 4112, 4304, 4768, 5024, 5288, 5608, 5960,
        6344, 6760, 7208, 7688, 7888, 8432, 8768, 9136, 9776, 10208
    ]
];

pub struct BlockDivision {
    n0: [Vec<usize>; 40],
    n1: [Vec<usize>; 40],
    n2: [Vec<usize>; 40],
    n3: [Vec<usize>; 40],
    //the third variable is unused for now as it signifies the 'error correction capacity', which is purely informational
    ecc0: [Vec<(usize, usize, usize)>; 40],
    ecc1: [Vec<(usize, usize, usize)>; 40],
    ecc2: [Vec<(usize, usize, usize)>; 40],
    ecc3: [Vec<(usize, usize, usize)>; 40],
}

impl BlockDivision {
    pub fn new() -> Self {
        Self {
            n0: [
                vec![1], vec![1], vec![1], vec![1], vec![1],
                vec![2], vec![2], vec![2], vec![2], vec![2, 2],
                vec![4], vec![2, 2], vec![4], vec![3, 1], vec![5, 1],
                vec![5, 1], vec![1, 5], vec![5, 1], vec![3, 4], vec![3, 5],
                vec![4, 4], vec![2, 7], vec![4, 5], vec![6, 4], vec![8, 4],
                vec![10, 2], vec![8, 4], vec![3, 10], vec![7, 7], vec![5, 10],
                vec![13, 3], vec![17], vec![17, 1], vec![13, 6], vec![12, 7],
                vec![6, 14], vec![17, 4], vec![4, 18], vec![20, 4], vec![19, 6]
            ],
            n1: [
                vec![1], vec![1], vec![1], vec![2], vec![2],
                vec![4], vec![4], vec![2, 2], vec![3, 2], vec![4, 1],
                vec![1, 4], vec![6, 2], vec![8, 1], vec![4, 5], vec![5, 5],
                vec![7, 3], vec![10, 1], vec![9, 4], vec![3, 11], vec![3, 13],
                vec![17], vec![17], vec![4, 14], vec![6, 14], vec![8, 13],
                vec![19, 4], vec![22, 3], vec![3, 23], vec![21, 7], vec![19, 10],
                vec![2, 29], vec![10, 23], vec![14, 21], vec![14, 23], vec![12, 26],
                vec![6, 34], vec![29, 14], vec![13, 32], vec![40, 7], vec![18, 31]
            ],
            n2: [
                vec![1], vec![1], vec![2], vec![2], vec![2, 2],
                vec![4], vec![2, 4], vec![4, 2], vec![4, 4], vec![6, 2],
                vec![4, 4], vec![4, 6], vec![8, 4], vec![11, 5], vec![5, 7],
                vec![15, 2], vec![1, 15], vec![17, 1], vec![17, 4], vec![15, 5],
                vec![17, 6], vec![7, 16], vec![11, 14], vec![11, 16], vec![7, 22],
                vec![28, 6], vec![8, 26], vec![14, 31], vec![1, 37], vec![15, 25],
                vec![42, 1], vec![10, 35], vec![29, 19], vec![44, 7], vec![39, 14],
                vec![46, 10], vec![49, 10], vec![48, 14], vec![43, 22], vec![34, 34]
            ],
            n3: [
                vec![1], vec![1], vec![2], vec![4], vec![2, 2],
                vec![4], vec![4, 1], vec![4, 2], vec![4, 4], vec![6, 2],
                vec![3, 8], vec![7, 4], vec![12, 4], vec![11, 5], vec![11, 7],
                vec![3, 13], vec![2, 17], vec![2, 19], vec![9, 16], vec![15, 10],
                vec![19, 6], vec![34], vec![16, 14], vec![30, 2], vec![22, 13],
                vec![33, 4], vec![12, 28], vec![11, 31], vec![19, 26], vec![23, 25],
                vec![23, 28], vec![19, 35], vec![11, 46], vec![59, 1], vec![22, 41],
                vec![2, 64], vec![24, 46], vec![42, 32], vec![10, 67], vec![20, 61]
            ],
            ecc0: [
                vec![(26, 19, 2)], vec![(44, 34, 4)], vec![(70, 55, 7)], vec![(100, 80, 10)], vec![(134, 108, 13)],
                vec![(86, 68, 9)], vec![(98, 78, 10)], vec![(121, 97, 12)], vec![(146, 116, 15)], vec![(86, 68, 9), (87, 69, 9)],
                vec![(101, 81, 10)], vec![(116, 92, 12), (117, 93, 12)], vec![(133, 107, 13)], vec![(145, 115, 15), (146, 116, 15)], vec![(109, 87, 11), (110, 88, 11)],
                vec![(122, 98, 12), (123, 99, 12)], vec![(135, 107, 14), (136, 108, 14)], vec![(150, 120, 15), (151, 121, 15)], vec![(141, 113, 14), (142, 114, 14)], vec![(135, 107, 14), (136, 108, 14)],
                vec![(144, 116, 14), (145, 117, 14)], vec![(139, 111, 14), (140, 112, 14)], vec![(151, 121, 15), (152, 122, 15)], vec![(147, 117, 15), (148, 118, 15)], vec![(132, 106, 13), (133, 107, 13)],
                vec![(142, 114, 14), (143, 115, 14)], vec![(152, 122, 15), (153, 123, 15)], vec![(147, 117, 15), (148, 118, 15)], vec![(146, 116, 15), (147, 117, 15)], vec![(145, 115, 15), (146, 116, 15)],
                vec![(145, 115, 15), (146, 116, 15)], vec![(145, 115, 15)], vec![(145, 115, 15), (146, 116, 15)], vec![(145, 115, 15), (146, 116, 15)], vec![(151, 121, 15), (152, 122, 15)],
                vec![(151, 121, 15), (152, 122, 15)], vec![(152, 122, 15), (153, 123, 15)], vec![(152, 122, 15), (153, 123, 15)], vec![(147, 117, 15), (148, 118, 15)],  vec![(148, 118, 15), (149, 119, 15)]
            ],
            ecc1: [
                vec![(26, 16, 4)], vec![(44, 28, 8)], vec![(70, 44, 13)], vec![(50, 32, 9)], vec![(67, 43, 12)],
                vec![(43, 27, 8)], vec![(49, 31, 9)], vec![(60, 38, 11), (61, 39, 11)], vec![(58, 36, 11), (59, 37, 11)], vec![(69, 43, 13), (70, 44, 13)],
                vec![(80, 50, 15), (81, 51, 15)], vec![(58, 36, 11), (59, 37, 11)], vec![(59, 37, 11), (60, 38, 11)], vec![(64, 40, 12), (65, 41, 12)], vec![(65, 41, 12), (66, 42, 12)],
                vec![(73, 45, 14), (74, 46, 14)], vec![(74, 46, 14), (75, 47, 14)], vec![(69, 43, 13), (70, 44, 13)], vec![(70, 44, 13), (71, 45, 13)], vec![(67, 41, 13), (68, 42, 13)],
                vec![(68, 42, 13)], vec![(74, 46, 14)], vec![(75, 47, 14), (76, 48, 14)], vec![(73, 45, 14), (74, 46, 14)], vec![(75, 47, 14), (76, 48, 14)],
                vec![(74, 46, 14), (75, 47, 14)], vec![(73, 45, 14), (74, 46, 14)], vec![(73, 45, 14), (74, 46, 14)], vec![(73, 45, 14), (74, 46, 14)], vec![(75, 47, 14), (76, 48, 14)],
                vec![(74, 46, 14), (75, 47, 14)], vec![(74, 46, 14), (75, 47, 14)], vec![(74, 46, 14), (75, 47, 14)], vec![(74, 46, 14), (75, 47, 14)], vec![(75, 47, 14), (76, 48, 14)],
                vec![(75, 47, 14), (76, 48, 14)], vec![(74, 46, 14), (75, 47, 14)], vec![(74, 46, 14), (75, 47, 14)], vec![(75, 47, 14), (76, 48, 14)], vec![(75, 47, 14), (76, 48, 14)]
            ],
            ecc2: [
                vec![(26, 13, 6)], vec![(44, 22, 11)], vec![(35, 17, 9)], vec![(50, 24, 13)], vec![(33, 15, 9), (34, 16, 9)],
                vec![(43, 19, 12)], vec![(32, 14, 9), (33, 15, 9)], vec![(40, 18, 11), (41, 19, 11)], vec![(36, 16, 10), (37, 17, 10)], vec![(43, 19, 12), (44, 20, 12)],
                vec![(50, 22, 14), (51, 23, 14)], vec![(46, 20, 13), (47, 21, 13)], vec![(44, 20, 12), (45, 21, 12)], vec![(36, 16, 10), (37, 17, 10)], vec![(54, 24, 15), (55, 25, 15)],
                vec![(43, 19, 12), (44, 20, 12)], vec![(50, 22, 14), (51, 23, 14)], vec![(50, 22, 14), (51, 23, 14)], vec![(47, 21, 13), (48, 22, 13)], vec![(54, 24, 15), (55, 25, 15)],
                vec![(50, 22, 14), (51, 23, 14)], vec![(54, 24, 15), (55, 25, 15)], vec![(54, 24, 15), (55, 25, 15)], vec![(54, 24, 15), (55, 25, 15)], vec![(54, 24, 15), (55, 25, 15)],
                vec![(50, 22, 14), (51, 23, 14)], vec![(53, 23, 15), (54, 24, 15)], vec![(54, 24, 15), (55, 25, 15)], vec![(53, 23, 15), (54, 24, 15)], vec![(54, 24, 15), (55, 25, 15)],
                vec![(54, 24, 15), (55, 25, 15)], vec![(54, 24, 15), (55, 25, 15)], vec![(54, 24, 15), (55, 25, 15)], vec![(54, 24, 15), (55, 25, 15)], vec![(54, 24, 15), (55, 25, 15)],
                vec![(54, 24, 15), (55, 25, 15)], vec![(54, 24, 15), (55, 25, 15)], vec![(54, 24, 15), (55, 25, 15)], vec![(54, 24, 15), (55, 25, 15)], vec![(54, 24, 15), (55, 25, 15)]
            ],
            ecc3: [
                vec![(26, 9, 8)], vec![(44, 16, 14)], vec![(35, 13, 11)], vec![(25, 9, 8)], vec![(33, 11, 11), (34, 12, 11)],
                vec![(43, 15, 14)], vec![(39, 13, 13), (40, 14, 13)], vec![(40, 14, 13), (41, 15, 13)], vec![(36, 12, 12), (37, 13, 12)], vec![(43, 15, 14), (44, 16, 14)],
                vec![(36, 12, 12), (37, 13, 12)], vec![(42, 14, 14), (43, 15, 14)], vec![(33, 11, 11), (34, 12, 11)], vec![(36, 12, 12), (37, 13, 12)], vec![(36, 12, 12), (37, 13, 12)],
                vec![(45, 15, 15), (46, 16, 15)], vec![(42, 14, 14), (43, 15, 14)], vec![(42, 14, 14), (43, 15, 14)], vec![(39, 13, 13), (40, 14, 13)], vec![(43, 15, 14), (44, 16, 14)],
                vec![(46, 16, 15), (47, 17, 15)], vec![(37, 13, 12)], vec![(45, 15, 15), (46, 16, 15)], vec![(46, 16, 15), (47, 17, 15)], vec![(45, 15, 15), (46, 16, 15)],
                vec![(46, 16, 15), (47, 17, 15)], vec![(45, 15, 15), (46, 16, 15)], vec![(45, 15, 15), (46, 16, 15)], vec![(45, 15, 15), (46, 16, 15)], vec![(45, 15, 15), (46, 16, 15)],
                vec![(45, 15, 15), (46, 16, 15)], vec![(45, 15, 15), (46, 16, 15)], vec![(45, 15, 15), (46, 16, 15)], vec![(46, 16, 15), (47, 17, 15)], vec![(45, 15, 15), (46, 16, 15)],
                vec![(45, 15, 15), (46, 16, 15)], vec![(45, 15, 15), (46, 16, 15)], vec![(45, 15, 15), (46, 16, 15)], vec![(45, 15, 15), (46, 16, 15)], vec![(45, 15, 15), (46, 16, 15)]
            ]
        }
    }

    pub fn consume(self, version: u8, ecc: ECCLevel) -> (Vec<(usize, usize, usize)>, Vec<usize>) {
        let version = (version - 1) as usize;
        (
            match ecc {
                ECCLevel::Low => self.ecc0[version].clone(),
                ECCLevel::Medium => self.ecc1[version].clone(),
                ECCLevel::Quartile => self.ecc2[version].clone(),
                ECCLevel::High => self.ecc3[version].clone()
            },
            match ecc {
                ECCLevel::Low => self.n0[version].clone(),
                ECCLevel::Medium => self.n1[version].clone(),
                ECCLevel::Quartile => self.n2[version].clone(),
                ECCLevel::High => self.n3[version].clone()
            }
        )
    }
}

pub fn qr_version_query(ecc: &ECCLevel, size: usize) -> u8 {
    let idx = match ecc {
        ECCLevel::Low => 0,
        ECCLevel::Medium => 1,
        ECCLevel::Quartile => 2,
        ECCLevel::High => 3
    };

    let mut first = 0;
    let mut last = 40;
    let mut mid;

    while first < last {
        mid = (first + last) / 2;

        if MAX_SIZE_DATA[idx][mid] < size {
            first = mid + 1;
        } else {
            last = mid;
        }
    }

    if first >= 40 {
        return 41;
    }
    
    return (first + 1) as u8;
}

pub fn obtain_qr_alignment() -> Vec<Vec<u8>> {
    vec![
        vec![],
        vec![6, 18],
        vec![6, 22],
        vec![6, 26],
        vec![6, 30],
        vec![6, 34],
        vec![6, 22, 38],
        vec![6, 24, 42],
        vec![6, 26, 46],
        vec![6, 28, 50],
        vec![6, 30, 54],
        vec![6, 32, 58],
        vec![6, 34, 62],
        vec![6, 26, 46, 66],
        vec![6, 26, 48, 70],
        vec![6, 26, 50, 74],
        vec![6, 30, 54, 78],
        vec![6, 30, 56, 82],
        vec![6, 30, 58, 86],
        vec![6, 34, 62, 90],
        vec![6, 28, 50, 72, 94],
        vec![6, 26, 50, 74, 98],
        vec![6, 30, 54, 78, 102],
        vec![6, 28, 54, 80, 106],
        vec![6, 32, 58, 84, 110],
        vec![6, 30, 58, 86, 114],
        vec![6, 34, 62, 90, 118],
        vec![6, 26, 50, 74, 98, 122],
        vec![6, 30, 54, 78, 102, 126],
        vec![6, 26, 52, 78, 104, 130],
        vec![6, 30, 56, 82, 108, 134],
        vec![6, 34, 60, 86, 112, 138],
        vec![6, 30, 58, 86, 114, 142],
        vec![6, 34, 62, 90, 118, 146],
        vec![6, 30, 54, 78, 102, 126, 150],
        vec![6, 24, 50, 76, 102, 128, 154],
        vec![6, 28, 54, 80, 106, 132, 158],
        vec![6, 32, 58, 84, 110, 136, 162],
        vec![6, 26, 54, 82, 110, 138, 166],
        vec![6, 30, 58, 86, 114, 142, 170],
    ]
}
